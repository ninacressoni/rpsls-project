# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

# Paddles
paddle1_pos = HEIGHT / 2.5
paddle2_pos = HEIGHT / 2.5
paddle1_vel = 0
paddle2_vel = 0
paddle_vel = 5

# initialize ball_pos and ball_vel for new bal in middle of table
ball_pos = [WIDTH // 2, HEIGHT // 2]
ball_vel = [0, 1]

# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    # Randomization of velocity
    ball_pos = [WIDTH // 2, HEIGHT // 2]
    ball_vel[0] = -random.randrange(120,240) / 100
    if direction == True:
        ball_vel[0] *= -1
    ball_vel[1] = -random.randrange(60, 180) / 100

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(0)
    paddle1_pos = HEIGHT / 2.5
    paddle2_pos = HEIGHT / 2.5

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel

    # draw mid line and gutters
    canvas.draw_line([WIDTH //2, 0],[WIDTH // 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")

    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]

    if ball_pos[0] <= (BALL_RADIUS + HALF_PAD_WIDTH) or ball_pos[0] >= (WIDTH - PAD_WIDTH - BALL_RADIUS):
        ball_vel[0] *= -1

        if (ball_pos[0] > WIDTH // 2):
            if (ball_pos[1] < paddle2_pos or ball_pos[1] > paddle2_pos + PAD_HEIGHT):
                score1 += 1
                spawn_ball(LEFT)
            else: ball_vel[0] += .1 * ball_vel[0]

        if (ball_pos[0] < WIDTH // 2):
            if (ball_pos[1] < paddle1_pos or ball_pos[1] > paddle1_pos + PAD_HEIGHT ):
                score2 += 1
                spawn_ball(RIGHT)
            else: ball_vel[0] += .1 * ball_vel[0]

    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= (HEIGHT - BALL_RADIUS):
        ball_vel[1] *= -1


    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")


    # update paddle's vertical position, keep paddle on the screen
    global paddle1_vel, paddle2_vel

    if (paddle1_pos <= HEIGHT - PAD_HEIGHT and paddle1_vel > 0) or (paddle1_pos >= 0 and paddle1_vel < 0) :
        paddle1_pos += paddle1_vel
    elif (paddle2_pos <= HEIGHT - PAD_HEIGHT and paddle2_vel > 0) or (paddle2_pos >= 0 and paddle2_vel < 0) :
        paddle2_pos += paddle2_vel

    # draw paddles
    canvas.draw_polygon([[0, paddle1_pos], [PAD_WIDTH, paddle1_pos],[PAD_WIDTH, (paddle1_pos) + PAD_HEIGHT ],[0, (paddle1_pos) + PAD_HEIGHT]],1, "White", "Black")
    # determine whether paddle and ball collide
    canvas.draw_polygon([[WIDTH, paddle2_pos], [WIDTH - PAD_WIDTH, paddle2_pos], [WIDTH - PAD_WIDTH, paddle2_pos + PAD_HEIGHT], [WIDTH, paddle2_pos + PAD_HEIGHT]],1, "White", "Black")
    # draw scores
    canvas.draw_text(str(score1), [225, 100], 60, "Red")
    canvas.draw_text(str(score2), [350, 100], 60, "Red")


def keydown(key):
    global paddle1_vel, paddle2_vel, paddle_vel

    # 1st player
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -paddle_vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = paddle_vel

    # 2nd player
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = paddle_vel
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -paddle_vel


def keyup(key):
    global paddle1_vel, paddle2_vel, paddle_vel

    # 1st player
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel = 0

    # 2nd player
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", new_game, 200)

# start frame
new_game()
frame.start()

____________
import random

def name_to_number(name):
    if name == "rock":
        return 0
    elif name == "Spock":
        return 1
    elif name == "paper":
        return 2
    elif name == "lizard":
        return 3
    elif name == "scissors":
        return 4
    else:
        print "Error"
    
def number_to_name(number):
    if number == 0:
        return "rock"
    elif number == 1:
        return "Spock"
    elif number == 2:
        return "paper"
    elif number == 3:
        return "lizard"
    elif number == 4:
        return "scissors"
    else:
        print "Error"
                    

def rpsls(player_choice): 
    print " "
    print "Player chooses: " + player_choice
    player_number = name_to_number(player_choice)
    comp_number = random.randrange(0, 5)
    comp_choice = number_to_name(comp_number)
    print "Computer chooses: " + comp_choice

    num = (player_number - comp_number) % 5
    if num == 1 or num == 2:
        print "Player wins!"
    elif num == 0:
        print "It's a tie!"
    else:
        print "Computer wins!"

rpsls("rock")
rpsls("Spock")
rpsls("paper")
rpsls("lizard")
rpsls("scissors")



Example of a random result (done with codeskulptor.org):

Player chooses: rock
Computer chooses: scissors
Player wins!
 
Player chooses: Spock
Computer chooses: Spock
It's a tie!
 
Player chooses: paper
Computer chooses: Spock
Player wins!
 
Player chooses: lizard
Computer chooses: paper
Player wins!
 
Player chooses: scissors
Computer chooses: rock
Computer wins!
